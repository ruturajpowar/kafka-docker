version: "3.7"

networks:
  kafka-net:
    name: kafka-net
    driver: bridge

services:
  zookeeper:
    image: zookeeper:3.6.1
    container_name: zookeeper
    restart: always
    networks:
      - kafka-net
    ports:
      - "2181:2181"
    volumes:
      - /home/ruturaj/Documents/docker/docker-data/zookeeper:/bitnami/zookeeper

  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    container_name: kafka
    restart: always
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    volumes:
      - /home/ruturaj/Documents/docker/docker-data/kafka:/bitnami/kafka
    environment:
            #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
            #KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
            #KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://10.208.35.199:9092
            #KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  producer:
    image: kp
    container_name: kafka-producer
    restart: always
    networks: 
      - kafka-net
    ports:
      - "8081:8080"
    environment:
      spring.kafka.consumer.bootstrap-servers: kafka:9092
    depends_on:
      - kafka 

  consumer:
    image: kc
    container_name: kafka-consumer
    restart: always
    networks: 
      - kafka-net
    ports:
      - "8082:8080"
    environment:
      spring.kafka.consumer.bootstrap-servers: kafka:9092
    depends_on:
      - kafka 


